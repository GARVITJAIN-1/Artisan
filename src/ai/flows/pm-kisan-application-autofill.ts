// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview An AI agent to auto-fill PM-KISAN application forms by fetching user data.
 *
 * - pmKisanApplicationAutofill - A function that handles the auto-filling process.
 * - PmKisanApplicationAutofillInput - The input type for the pmKisanApplicationAutofill function.
 * - PmKisanApplicationAutofillOutput - The return type for the pmKisanApplicationAutofill function.
 */

import {ai} from '@/ai/genkit';
import {db} from '@/lib/db';
import {z} from 'genkit';

// 1. Define the tool for the AI to fetch farmer data.
const getFarmerDetails = ai.defineTool(
  {
    name: 'getFarmerDetails',
    description: 'Get the details of a farmer from the database using their ID.',
    inputSchema: z.object({
      farmerId: z.string().describe('The unique ID of the farmer.'),
    }),
    outputSchema: z.any().describe('The farmer data as a JSON object.'),
  },
  async input => {
    return db.getFarmerById(input.farmerId);
  }
);

// 2. Update the input schema for the flow. It now takes farmerId.
const PmKisanApplicationAutofillInputSchema = z.object({
  farmerId: z.string().describe('The ID of the farmer to fill the application for.'),
  formDataSchema: z.string().describe('The JSON schema of the form to be filled.'),
  currentFormData: z
    .string()
    .optional()
    .describe('The current form data as a JSON string, to be used for multi-form filling, should be an empty object if not available.'),
});
export type PmKisanApplicationAutofillInput = z.infer<typeof PmKisanApplicationAutofillInputSchema>;

const PmKisanApplicationAutofillOutputSchema = z.object({
  filledFormData: z.string().describe('The filled form data as a JSON string.'),
});
export type PmKisanApplicationAutofillOutput = z.infer<typeof PmKisanApplicationAutofillOutputSchema>;

export async function pmKisanApplicationAutofill(input: PmKisanApplicationAutofillInput): Promise<PmKisanApplicationAutofillOutput> {
  return pmKisanApplicationAutofillFlow(input);
}

// 3. Update the prompt to use the new tool and logic.
const prompt = ai.definePrompt({
  name: 'pmKisanApplicationAutofillPrompt',
  input: {
    schema: PmKisanApplicationAutofillInputSchema,
  },
  output: {
    schema: PmKisanApplicationAutofillOutputSchema,
  },
  // Provide the new tool to the AI.
  tools: [getFarmerDetails],
  prompt: `You are an AI assistant specialized in auto-filling application forms for the PM-KISAN scheme.

  Your task is to populate a form with the user's data. First, you must fetch the user's data using the provided farmer ID.

  Farmer ID: {{{farmerId}}}

  Use the 'getFarmerDetails' tool to fetch the data for this farmer.

  Once you have the user data, use it to populate the form that adheres to the following JSON schema:
  {{formDataSchema}}

  Here is the existing form data, which you should use as a base if available:
  {{#if currentFormData}}
  {{{currentFormData}}}
  {{else}}
  {}
  {{/if}}
  
  Please map the data from the fetched user details to the form fields.
  If a value is not found in the user data, leave the corresponding form field as it is (if it has a default value) or set it to null.
  Return the completed form data as a valid JSON string in the 'filledFormData' field.
  `,
});

const pmKisanApplicationAutofillFlow = ai.defineFlow(
  {
    name: 'pmKisanApplicationAutofillFlow',
    inputSchema: PmKisanApplicationAutofillInputSchema,
    outputSchema: PmKisanApplicationAutofillOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
