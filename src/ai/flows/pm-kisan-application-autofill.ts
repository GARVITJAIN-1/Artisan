// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview An AI agent to auto-fill PM-KISAN application forms.
 *
 * - pmKisanApplicationAutofill - A function that handles the auto-filling process.
 * - PmKisanApplicationAutofillInput - The input type for the pmKisanApplicationAutofill function.
 * - PmKisanApplicationAutofillOutput - The return type for the pmKisanApplicationAutofill function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PmKisanApplicationAutofillInputSchema = z.object({
  formDataSchema: z.string().describe('The JSON schema of the form to be filled.'),
  currentFormData: z.string().optional().describe('The current form data as a JSON string, to be used for multi-form filling, should be an empty object if not available.'),
  userData: z.string().describe('The user data as a JSON string, including Aadhaar details, bank details, land records etc.'),
});
export type PmKisanApplicationAutofillInput = z.infer<typeof PmKisanApplicationAutofillInputSchema>;

const PmKisanApplicationAutofillOutputSchema = z.object({
  filledFormData: z.string().describe('The filled form data as a JSON string.'),
});
export type PmKisanApplicationAutofillOutput = z.infer<typeof PmKisanApplicationAutofillOutputSchema>;

export async function pmKisanApplicationAutofill(input: PmKisanApplicationAutofillInput): Promise<PmKisanApplicationAutofillOutput> {
  return pmKisanApplicationAutofillFlow(input);
}

const prompt = ai.definePrompt({
  name: 'pmKisanApplicationAutofillPrompt',
  input: {
    schema: PmKisanApplicationAutofillInputSchema,
  },
  output: {
    schema: PmKisanApplicationAutofillOutputSchema,
  },
  prompt: `You are an AI assistant specialized in auto-filling application forms for the PM-KISAN scheme.

  Your task is to populate a form with the provided user data, adhering to the given form schema.

  Here is the JSON schema of the form:
  {{formDataSchema}}

  Here is the user data:
  {{{userData}}}

  Here is the existing form data, which you should use as a base if available:
  {{#if currentFormData}}
  {{{currentFormData}}}
  {{else}}
  {}
  {{/if}}

  Please fill the form using the following mapping:
  - 'state' should be mapped from 'userData.address.state'.
  - 'district' should be mapped from 'userData.address.district'.
  - 'subDistrict' should be mapped from 'userData.address.subDistrict'.
  - 'block' should be mapped from 'userData.address.block'.
  - 'village' should be mapped from 'userData.address.village'.
  - 'farmerName' should be mapped from 'userData.name'.
  - 'gender' should be mapped from 'userData.gender'.
  - 'category' should be mapped from 'userData.category'.
  - 'farmerType' should be mapped from 'userData.farmerType'.
  - 'aadhaarNumber' should be mapped from 'userData.aadhaarNumber'.
  - 'bankName' should be mapped from 'userData.bank.name'.
  - 'ifscCode' should be mapped from 'userData.bank.ifsc'.
  - 'accountNumber' should be mapped from 'userData.bank.accountNumber'.

  If a value is not found in the user data, leave the corresponding form field as it is (if it has a default value) or set it to null.
  Return the completed form data as a valid JSON string in the 'filledFormData' field.
  `,
});

const pmKisanApplicationAutofillFlow = ai.defineFlow(
  {
    name: 'pmKisanApplicationAutofillFlow',
    inputSchema: PmKisanApplicationAutofillInputSchema,
    outputSchema: PmKisanApplicationAutofillOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
