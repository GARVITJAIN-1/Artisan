// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview An AI agent to auto-fill PM-KISAN application forms.
 *
 * - pmKisanApplicationAutofill - A function that handles the auto-filling process.
 * - PmKisanApplicationAutofillInput - The input type for the pmKisanApplicationAutofill function.
 * - PmKisanApplicationAutofillOutput - The return type for the pmKisanApplicationAutofill function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PmKisanApplicationAutofillInputSchema = z.object({
  formDataSchema: z.string().describe('The JSON schema of the form to be filled.'),
  currentFormData: z.string().optional().describe('The current form data as a JSON string, to be used for multi-form filling, should be an empty object if not available.'),
  userData: z.string().describe('The user data as a JSON string, including Aadhaar details, bank details, land records etc.'),
});
export type PmKisanApplicationAutofillInput = z.infer<typeof PmKisanApplicationAutofillInputSchema>;

const PmKisanApplicationAutofillOutputSchema = z.object({
  filledFormData: z.string().describe('The filled form data as a JSON string.'),
});
export type PmKisanApplicationAutofillOutput = z.infer<typeof PmKisanApplicationAutofillOutputSchema>;

export async function pmKisanApplicationAutofill(input: PmKisanApplicationAutofillInput): Promise<PmKisanApplicationAutofillOutput> {
  return pmKisanApplicationAutofillFlow(input);
}

const prompt = ai.definePrompt({
  name: 'pmKisanApplicationAutofillPrompt',
  input: {
    schema: PmKisanApplicationAutofillInputSchema,
  },
  output: {
    schema: PmKisanApplicationAutofillOutputSchema,
  },
  prompt: `You are an AI assistant specialized in auto-filling application forms.

  Your task is to understand the structure of a given form, and populate it with the provided user data.

  Here is the JSON schema of the form:
  {{formDataSchema}}

  Here is the existing form data, to be used if available, otherwise populate with empty object:
  {{#if currentFormData}}
  {{{currentFormData}}}
  {{else}}
  {}
  {{/if}}

  Here is the user data:
  {{{userData}}}

  Based on the schema and the user data, fill the form. Ensure that the filled form data adheres to the specified schema.
  Return the filled form data as a JSON string.
  If you cannot find the corresponding value from user data, leave it as is if there is a default value in form schema, otherwise make it null.
  Ensure the final filledFormData value is valid JSON.
  `,
});

const pmKisanApplicationAutofillFlow = ai.defineFlow(
  {
    name: 'pmKisanApplicationAutofillFlow',
    inputSchema: PmKisanApplicationAutofillInputSchema,
    outputSchema: PmKisanApplicationAutofillOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
